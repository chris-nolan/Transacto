//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v10.0.27.0 (Newtonsoft.Json v12.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------





export class PurchaseOrder implements IPurchaseOrder {
    purchaseOrderId!: string;
    purchaseOrderReference!: string;
    purchaseOrderNumber!: number;
    vendorId!: string;
    billingAddress!: BillingAddress;
    shippingAddress!: BillingAddress;
    purchaseOrderItems!: PurchaseOrderItems[];

    constructor(data?: IPurchaseOrder) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.billingAddress = new BillingAddress();
            this.shippingAddress = new BillingAddress();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.purchaseOrderId = _data["purchase-order-id"];
            this.purchaseOrderReference = _data["purchase-order-reference"];
            this.purchaseOrderNumber = _data["purchase-order-number"];
            this.vendorId = _data["vendor-id"];
            this.billingAddress = _data["billing-address"] ? BillingAddress.fromJS(_data["billing-address"]) : new BillingAddress();
            this.shippingAddress = _data["shipping-address"] ? BillingAddress.fromJS(_data["shipping-address"]) : new BillingAddress();
            if (Array.isArray(_data["purchase-order-items"])) {
                this.purchaseOrderItems = [] as any;
                for (let item of _data["purchase-order-items"])
                    this.purchaseOrderItems!.push(PurchaseOrderItems.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PurchaseOrder {
        data = typeof data === 'object' ? data : {};
        let result = new PurchaseOrder();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["purchase-order-id"] = this.purchaseOrderId;
        data["purchase-order-reference"] = this.purchaseOrderReference;
        data["purchase-order-number"] = this.purchaseOrderNumber;
        data["vendor-id"] = this.vendorId;
        data["billing-address"] = this.billingAddress ? this.billingAddress.toJSON() : <any>undefined;
        data["shipping-address"] = this.shippingAddress ? this.shippingAddress.toJSON() : <any>undefined;
        if (Array.isArray(this.purchaseOrderItems)) {
            data["purchase-order-items"] = [];
            for (let item of this.purchaseOrderItems)
                data["purchase-order-items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPurchaseOrder {
    purchaseOrderId: string;
    purchaseOrderReference: string;
    purchaseOrderNumber: number;
    vendorId: string;
    billingAddress: BillingAddress;
    shippingAddress: BillingAddress;
    purchaseOrderItems: PurchaseOrderItems[];
}

export class BillingAddress implements IBillingAddress {
    name!: string;
    street!: string;
    city!: string;
    country!: string;

    constructor(data?: IBillingAddress) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.street = _data["street"];
            this.city = _data["city"];
            this.country = _data["country"];
        }
    }

    static fromJS(data: any): BillingAddress {
        data = typeof data === 'object' ? data : {};
        let result = new BillingAddress();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["street"] = this.street;
        data["city"] = this.city;
        data["country"] = this.country;
        return data; 
    }
}

export interface IBillingAddress {
    name: string;
    street: string;
    city: string;
    country: string;
}

export class PurchaseOrderItems implements IPurchaseOrderItems {
    sku!: string;
    itemId!: string;
    quantity!: number;
    unitPrice!: number;

    constructor(data?: IPurchaseOrderItems) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sku = _data["sku"];
            this.itemId = _data["item-id"];
            this.quantity = _data["quantity"];
            this.unitPrice = _data["unit-price"];
        }
    }

    static fromJS(data: any): PurchaseOrderItems {
        data = typeof data === 'object' ? data : {};
        let result = new PurchaseOrderItems();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sku"] = this.sku;
        data["item-id"] = this.itemId;
        data["quantity"] = this.quantity;
        data["unit-price"] = this.unitPrice;
        return data; 
    }
}

export interface IPurchaseOrderItems {
    sku: string;
    itemId: string;
    quantity: number;
    unitPrice: number;
}